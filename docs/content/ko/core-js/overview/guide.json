{"content":[{"type":"component","name":"Text","props":{"as":"h1","text":"가이드","kind":"heading-06"}},{"type":"component","name":"Section","props":{"children":[{"type":"component","name":"Text","props":{"text":"반응성에 대해","kind":"heading-03","as":"h4"}},{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"웹 개발에서 반응성은 사용자의 동작이나 데이터의 변경에 따라 실시간으로 UI가 갱신되고, 해당 데이터와 연관을 가지는 것들이 연쇄적으로 업데이트되는 것을 의미합니다."}}]}},{"type":"component","name":"Text","props":{"children":[{"type":"component","name":"CodeSnippet","props":{"codeText":"@rvjs/core","language":"javascript","type":"inline"}},{"type":"text","name":"text","props":{"text":"에서는 반응성을 부여하기 위해 상태 관리 시스템을 사용합니다. 상태가 변경되면, 연결된 DOM 요소가 자동으로 갱신되고, 상태와 연관된 다른 상태가 변경되거나 함수가 연쇄적으로 호출됩니다."}}]}},{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"상태 변화는 필요한 부분에만 영향을 미치므로, 불필요한 리렌더링을 최소화합니다. 예를 들어 특정 컴포넌트에서 "}},{"type":"component","name":"CodeSnippet","props":{"codeText":"useState","language":"javascript","type":"link","href":"#/ko/core-js/reactive/useState"}},{"type":"text","name":"text","props":{"text":"를 통해 생성한 상태가 변경될 경우, 실제 상태를 사용한 DOM 요소만 리렌더링을 발생시킵니다."}}]}},{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"반응성을 부여하기 위해 요소에 상태를 사용할 경우, "}},{"type":"component","name":"CodeSnippet","props":{"codeText":"dynamic","language":"javascript","type":"link","href":"#/ko/core-js/reactive/dynamic"}},{"type":"text","name":"text","props":{"text":" 함수의 매개 변수로 전달해야 합니다."}}]}},{"type":"component","name":"Iframe","props":{"src":"https://rvjs.xyz/example/core-js/overview/guide/ex1/"}},{"type":"component","name":"CodeSnippet","props":{"codeText":"const Counter = () => {\n  const [getCount, setCount] = useState(0)\n\n  return div({\n    children: [\n      h1({\n        textContent: dynamic(() => `Count: ${getCount()}`),\n      }),\n      button({\n        textContent: '-1',\n        onclick: () => setCount(getCount() - 1),\n      }),\n      button({\n        textContent: '+1',\n        onclick: () => setCount(getCount() + 1),\n      }),\n    ],\n  })\n}","language":"javascript","type":"multi","width":"100%","defaultShow":true}}]}},{"type":"component","name":"Section","props":{"children":[{"type":"component","name":"Text","props":{"text":"스타일 적용하기","kind":"heading-03","as":"h4"}},{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"두 가지 방식으로 스타일을 적용할 수 있습니다."}}]}},{"type":"component","name":"UnorderedList","props":{"children":[{"type":"component","name":"ListItem","props":{"children":[{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"인라인 방식"}},{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"인라인 방식이란 요소에 직접 스타일을 지정하는 방식입니다. 각 요소의 style 속성에 CSS 속성을 직접 작성하여 사용합니다. 이 방식은 상태를 사용해 반응성을 부여하기 쉽다는 장점이 있습니다."}}]}},{"type":"component","name":"Iframe","props":{"src":"https://rvjs.xyz/example/core-js/overview/guide/ex2/"}},{"type":"component","name":"CodeSnippet","props":{"codeText":"import { div, dynamic, useState } from '@rvjs/core'\n\nconst DynamicBox = () => {\n  const [width, setWidth] = useState(100)\n\n  return div({\n    children: [\n      div({\n        style: {\n          width: dynamic(() => `${width()}px`),\n          height: '100px',\n          backgroundColor: '#0c8ce9',\n          transition: 'width 0.2s',\n        },\n        onclick: () => {\n          if (width() < 300) {\n            setWidth(width() + 50)\n          }\n        },\n      }),\n    ],\n  })\n}\n\nexport default DynamicBox","language":"javascript","type":"multi","width":"100%","defaultShow":true}}]}}]}},{"type":"component","name":"ListItem","props":{"children":[{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"CSS 모듈 방식"}},{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"CSS 모듈 방식이란 CSS 파일을 모듈화하고, 클래스명을 전달해 스타일을 적용하는 방식입니다. 재사용과 유지 보수가 쉽다는 장점이 있습니다."}}]}},{"type":"component","name":"Iframe","props":{"src":"https://rvjs.xyz/example/core-js/overview/guide/ex3/"}},{"type":"component","name":"CodeSnippet","props":{"codeText":"import { div, dynamic, useState } from '@rvjs/core'\nimport styles from './style-ex2.module.css'\n\nconst RedOrBlueBox = () => {\n  const [isRed, setIsRed] = useState(true)\n\n  return div({\n    children: [\n      div({\n        classes: [\n          styles.box,\n          dynamic(() => (isRed() ? styles.red : styles.blue)),\n        ],\n        onclick: () => {\n          setIsRed(!isRed())\n        },\n      }),\n    ],\n  })\n}\n\nexport default RedOrBlueBox","language":"javascript","type":"multi","width":"100%","defaultShow":true}},{"type":"component","name":"CodeSnippet","props":{"codeText":".box {\n    width: 100px;\n    height: 100px;\n    transition: background-color 0.2s;\n}\n\n.red {\n    background-color: red;\n}\n\n.blue {\n    background-color: blue;\n}","language":"css","type":"multi","width":"100%","defaultShow":true}}]}}]}}]}}]}},{"type":"component","name":"Section","props":{"children":[{"type":"component","name":"Text","props":{"text":"컴포넌트 생성하기","kind":"heading-03","as":"h4"}},{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"컴포넌트는 효율적인 웹 개발을 위한 필수적인 개념입니다. 모양 또는 로직에 따라 원하는 크기로 구성하고, 이를 여러 곳에서 재사용할 수 있는 일종의 블록입니다."}}]}},{"type":"component","name":"Text","props":{"children":[{"type":"component","name":"CodeSnippet","props":{"codeText":"@rvjs/core","language":"javascript","type":"inline"}},{"type":"text","name":"text","props":{"text":"에서는 두 가지 방식으로 컴포넌트를 생성할 수 있습니다. "}},{"type":"component","name":"CodeSnippet","props":{"codeText":"component","language":"javascript","type":"link","href":"#/ko/core-js/dom/component"}},{"type":"text","name":"text","props":{"text":" 함수 또는 일반적인 함수 선언을 통해 생성합니다. 컴포넌트 내부에서 "}},{"type":"component","name":"CodeSnippet","props":{"codeText":"useGlobalState","language":"javascript","type":"link","href":"#/ko/core-js/reactive/useGlobalState"}},{"type":"text","name":"text","props":{"text":", "}},{"type":"component","name":"CodeSnippet","props":{"codeText":"onMount","language":"javascript","type":"link","href":"#/ko/core-js/reactive/onMount"}},{"type":"text","name":"text","props":{"text":", "}},{"type":"component","name":"CodeSnippet","props":{"codeText":"onDestroy","language":"javascript","type":"link","href":"#/ko/core-js/reactive/onDestroy"}},{"type":"text","name":"text","props":{"text":", "}},{"type":"component","name":"CodeSnippet","props":{"codeText":"createContext","language":"javascript","type":"link","href":"#/ko/core-js/reactive/createContext"}},{"type":"text","name":"text","props":{"text":" 훅을 사용하거나, 라우터의 특정 경로에 대응하는 컴포넌트로 사용할 경우 "}},{"type":"component","name":"CodeSnippet","props":{"codeText":"component","language":"javascript","type":"inline"}},{"type":"text","name":"text","props":{"text":" 함수를 통해 생성합니다. 이 외의 상황에서는 단순 함수 선언으로 컴포넌트를 생성할 수 있습니다."}}]}},{"type":"component","name":"Iframe","props":{"src":"https://rvjs.xyz/example/core-js/overview/guide/ex4/"}},{"type":"component","name":"CodeSnippet","props":{"codeText":"import { component, div, onDestroy, onMount } from '@rvjs/core'\n\nconst Content = component(() => {\n  onMount(() => {\n    console.log('Content component: mounted')\n  })\n\n  onDestroy(() => {\n    console.log('Content component: destroyed')\n  })\n\n  return div({\n    textContent: 'Hello World!',\n  })\n})\n\nexport default Content","language":"javascript","type":"multi","width":"100%","defaultShow":true}}]}},{"type":"component","name":"Section","props":{"children":[{"type":"component","name":"Text","props":{"text":"컴포넌트 props 전달하기","kind":"heading-03","as":"h4"}},{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"대부분의 SPA 개발 라이브러리의 "}},{"type":"component","name":"CodeSnippet","props":{"codeText":"props","language":"javascript","type":"inline"}},{"type":"text","name":"text","props":{"text":" 전달 방식과 유사합니다."}}]}},{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"그러나 컴포넌트 설계에서 조금 더 일관적이고 효율적인 "}},{"type":"component","name":"CodeSnippet","props":{"codeText":"props","language":"javascript","type":"inline"}},{"type":"text","name":"text","props":{"text":" 전달 방식이 궁금하다면 "}},{"type":"component","name":"CodeSnippet","props":{"codeText":"prop","language":"javascript","type":"link","href":"#/ko/core-js/reactive/prop"}},{"type":"text","name":"text","props":{"text":" 함수를 사용해 보세요."}}]}},{"type":"component","name":"Iframe","props":{"src":"https://rvjs.xyz/example/core-js/overview/guide/ex5/"}},{"type":"component","name":"CodeSnippet","props":{"codeText":"const App = () => {\n  return div({\n    children: [\n      Text({\n        as: 'span',\n        text: 'Hello World',\n      }),\n    ],\n  })\n}\n\ninterface TextProps {\n  as: 'p' | 'span'\n  text: string\n}\n\nconst Text = (props: TextProps) => {\n  const { as, text } = props\n\n  return element(as, {\n    textContent: text,\n  })\n}","language":"javascript","type":"multi","width":"100%","defaultShow":true}}]}},{"type":"component","name":"Section","props":{"children":[{"type":"component","name":"Text","props":{"text":"링크","kind":"heading-03","as":"h4"}},{"type":"component","name":"Link","props":{"href":"https://github.com/ILikeMintChocolate/rvjs/tree/main/packages/core-js","isExternal":true,"children":"GitHub"}},{"type":"component","name":"Link","props":{"href":"https://www.npmjs.com/package/@rvjs/core/v/0.2.21","isExternal":true,"children":"npm"}}]}},{"type":"element","name":"div","props":{"style":{"height":"60vh"}}},{"type":"component","name":"Link","props":{"href":"https://github.com/ILikeMintChocolate/rvjs/blob/docs/deploy/docs/content/ko/core-js/overview/guide.json","isExternal":true,"children":[{"type":"component","name":"DocumentIcon","props":{"style":{"width":"1rem","filter":"brightness(0) saturate(100%) invert(25%) sepia(69%) saturate(3617%) hue-rotate(218deg) brightness(100%) contrast(104%)","z-index":"-1"}}},{"type":"component","name":"Text","props":{"text":"Raw Data From Github","color":"linkPrimary"}}]}}]}
