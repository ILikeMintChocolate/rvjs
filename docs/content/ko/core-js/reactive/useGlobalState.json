{"content":[{"type":"component","name":"Text","props":{"as":"h1","text":"useGlobalState","kind":"heading-06"}},{"type":"component","name":"Section","props":{"children":[{"type":"component","name":"Text","props":{"children":[{"type":"component","name":"CodeSnippet","props":{"codeText":"useGlobalState","language":"javascript","type":"inline"}},{"type":"text","name":"text","props":{"text":"는 지정된 키를 통해 전역 상태에 접근하고 관리할 수 있도록 도와줍니다."}}]}}]}},{"type":"component","name":"Section","props":{"children":[{"type":"component","name":"Text","props":{"text":"예시","kind":"heading-03","as":"h4"}},{"type":"component","name":"Iframe","props":{"src":"https://rvjs.xyz/example/core-js/reactive/useGlobalState/ex1/","style":{"height":"15rem"}}},{"type":"component","name":"CodeSnippet","props":{"codeText":"import { component, div, dynamic, h1, p, useGlobalState } from '@rvjs/core'\n\nconst Counter = component(() => {\n  const [globalCount] = useGlobalState('COUNT', 0)\n\n  return div({\n    children: [\n      h1({\n        textContent: dynamic(() => `Count: ${globalCount()}`),\n      }),\n      A(),\n      B(),\n    ],\n  })\n})\n\nconst A = component(() => {\n  const [globalCount, setGlobalCount] = useGlobalState('COUNT', 0)\n\n  return p({\n    textContent: dynamic(() => `A Count: ${globalCount()}`),\n    onclick: () => setGlobalCount(globalCount() + 1),\n  })\n})\n\nconst B = component(() => {\n  const [globalCount, setGlobalCount] = useGlobalState('COUNT', 0)\n\n  return p({\n    textContent: dynamic(() => `B Count: ${globalCount()}`),\n    onclick: () => setGlobalCount(globalCount() + 1),\n  })\n})\n\nexport default Counter","language":"javascript","type":"multi","width":"100%","defaultShow":true}}]}},{"type":"component","name":"Section","props":{"children":[{"type":"component","name":"Text","props":{"text":"레퍼런스","kind":"heading-03","as":"h4"}},{"type":"component","name":"CodeSnippet","props":{"codeText":"function useGlobalState<T>(\n  key: string,\n  initialState: T,\n  options?: { override?: boolean },\n): [() => T, (newState: T) => void]","language":"typescript","type":"multi","width":"100%","defaultShow":true}},{"type":"component","name":"Text","props":{"text":"매개변수","kind":"heading-compact-01"}},{"type":"component","name":"UnorderedList","props":{"children":[{"type":"component","name":"ListItem","props":{"children":[{"type":"element","name":"div","props":{"style":{"display":"grid","gridTemplateColumns":"20% 80%"},"children":[{"type":"component","name":"Text","props":{"children":[{"type":"component","name":"CodeSnippet","props":{"codeText":"key","language":"javascript","type":"inline"}}],"as":"span"}},{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"전역 상태 접근을 위한 고유한 문자열 키입니다."}}],"as":"span"}}]}}]}},{"type":"component","name":"ListItem","props":{"children":[{"type":"element","name":"div","props":{"style":{"display":"grid","gridTemplateColumns":"20% 80%"},"children":[{"type":"component","name":"Text","props":{"children":[{"type":"component","name":"CodeSnippet","props":{"codeText":"initialState","language":"javascript","type":"inline"}}],"as":"span"}},{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"전역 상태의 초기값입니다."}}],"as":"span"}}]}}]}},{"type":"component","name":"ListItem","props":{"children":[{"type":"element","name":"div","props":{"style":{"display":"grid","gridTemplateColumns":"20% 80%"},"children":[{"type":"component","name":"Text","props":{"children":[{"type":"component","name":"CodeSnippet","props":{"codeText":"overwrite","language":"javascript","type":"inline"}}],"as":"span"}},{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"전역 상태가 이미 값을 가지고 있을 경우, 이를 덮어쓸지 여부를 지정합니다. 기본 값은 false입니다."}}],"as":"span"}}]}}]}}]}},{"type":"component","name":"Text","props":{"text":"반환 값","kind":"heading-compact-01"}},{"type":"component","name":"Text","props":{"children":[{"type":"component","name":"CodeSnippet","props":{"codeText":"useGlobalState","language":"javascript","type":"inline"}},{"type":"text","name":"text","props":{"text":"는 각각 "}},{"type":"component","name":"CodeSnippet","props":{"codeText":"getState","language":"javascript","type":"inline"}},{"type":"text","name":"text","props":{"text":"와 "}},{"type":"component","name":"CodeSnippet","props":{"codeText":"setState","language":"javascript","type":"inline"}},{"type":"text","name":"text","props":{"text":" 두 개의 값을 가진 배열을 반환합니다."}}]}},{"type":"component","name":"UnorderedList","props":{"children":[{"type":"component","name":"ListItem","props":{"children":[{"type":"element","name":"div","props":{"style":{"display":"grid","gridTemplateColumns":"20% 80%"},"children":[{"type":"component","name":"Text","props":{"children":[{"type":"component","name":"CodeSnippet","props":{"codeText":"getState","language":"javascript","type":"inline"}}],"as":"span"}},{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"현재 상태를 반환하는 함수입니다."}}],"as":"span"}}]}}]}},{"type":"component","name":"ListItem","props":{"children":[{"type":"element","name":"div","props":{"style":{"display":"grid","gridTemplateColumns":"20% 80%"},"children":[{"type":"component","name":"Text","props":{"children":[{"type":"component","name":"CodeSnippet","props":{"codeText":"setState","language":"javascript","type":"inline"}}],"as":"span"}},{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"상태를 업데이트하고, 리렌더링을 포함한 연쇄적인 효과를 발생시킵니다."}}],"as":"span"}}]}}]}}]}}]}},{"type":"component","name":"Section","props":{"children":[{"type":"component","name":"Text","props":{"text":"유의 사항","kind":"heading-03","as":"h4"}},{"type":"component","name":"UnorderedList","props":{"children":[{"type":"component","name":"ListItem","props":{"children":[{"type":"component","name":"Text","props":{"children":[{"type":"component","name":"CodeSnippet","props":{"codeText":"component","language":"javascript","type":"link","href":"#/ko/core-js/dom/component"}},{"type":"text","name":"text","props":{"text":" 함수를 사용해 생성된 컴포넌트 내부에서만 사용할 수 있습니다."}}],"as":"span"}}]}},{"type":"component","name":"ListItem","props":{"children":[{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"컴포넌트 생성 순서는 DOM 구조와 무관합니다. 예를 들어, A 컴포넌트가 B 컴포넌트의 부모일 경우, DOM 구조에서는 A가 상위, B가 하위 컴포넌트입니다. 그러나 생성 순서는 상황에 따라 달라질 수 있습니다. 따라서 "}},{"type":"component","name":"CodeSnippet","props":{"codeText":"useGlobalState","language":"javascript","type":"inline"}},{"type":"text","name":"text","props":{"text":" 사용 시, 기본값을 전달하기 위해 구조보다는 생성 순서를 고려해야 합니다. A 컴포넌트에서 B 컴포넌트로 값을 전달할 때도 B 컴포넌트가 먼저 생성될 수 있어 기본 값이 덮어씌워질 수 있습니다."}}],"as":"span"}}]}}]}}]}},{"type":"element","name":"div","props":{"style":{"height":"60vh"}}},{"type":"component","name":"Link","props":{"href":"https://github.com/ILikeMintChocolate/rvjs/blob/docs/deploy/docs/content/ko/core-js/reactive/useGlobalState.json","isExternal":true,"children":[{"type":"component","name":"DocumentIcon","props":{"style":{"width":"1rem","filter":"brightness(0) saturate(100%) invert(25%) sepia(69%) saturate(3617%) hue-rotate(218deg) brightness(100%) contrast(104%)","z-index":"-1"}}},{"type":"component","name":"Text","props":{"text":"Raw Data From Github","color":"linkPrimary"}}]}}]}