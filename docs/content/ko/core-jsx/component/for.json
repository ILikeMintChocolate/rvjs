{"content":[{"type":"component","name":"Text","props":{"as":"h1","text":"For","kind":"heading-06"}},{"type":"component","name":"Section","props":{"children":[{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"배열 형태의 상태를 기반으로 반복적인 요소를 생성할 때 사용합니다."}}]}}]}},{"type":"component","name":"Section","props":{"children":[{"type":"component","name":"Text","props":{"text":"예시","kind":"heading-03","as":"h4"}},{"type":"component","name":"Iframe","props":{"src":"https://rvjs.xyz/example/core-js/dom/for/ex1/","style":{"height":"15rem"}}},{"type":"component","name":"CodeSnippet","props":{"codeText":"import { For, useState } from '@rvjs/core'\n\nconst Products = () => {\n  const [products, setProducts] = useState([\n    { id: 1, name: 'Product 1' },\n    { id: 2, name: 'Product 2' },\n  ])\n\n  const addProduct = () => {\n    const newProduct = {\n      id: products().length + 1,\n      name: `Product ${products().length + 1}`,\n    }\n    setProducts([...products(), newProduct])\n  }\n\n  return (\n    <div>\n      <button onClick={addProduct}>Add Product</button>\n      <ul>\n        <For each={products()}>\n          {(product) => {\n            return <Product {...product} />\n          }}\n        </For>\n      </ul>\n    </div>\n  )\n}\n\nconst Product = (props) => {\n  return (\n    <li>\n      {props.id} - {props.name}\n    </li>\n  )\n}\n\nexport default Products","language":"jsx","type":"multi","width":"100%","defaultShow":true}}]}},{"type":"component","name":"Section","props":{"children":[{"type":"component","name":"Text","props":{"text":"레퍼런스","kind":"heading-03","as":"h4"}},{"type":"component","name":"CodeSnippet","props":{"codeText":"function For<T>(props: {\n  each: T[];\n  children: (item: T, index: GetState<number>) => Component | HTMLElement;\n}): ForComponent","language":"typescript","type":"multi","width":"100%","defaultShow":true}},{"type":"component","name":"Text","props":{"text":"속성","kind":"heading-compact-01"}},{"type":"component","name":"UnorderedList","props":{"children":[{"type":"component","name":"ListItem","props":{"children":[{"type":"element","name":"div","props":{"style":{"display":"grid","gridTemplateColumns":"20% 80%"},"children":[{"type":"component","name":"Text","props":{"children":[{"type":"component","name":"CodeSnippet","props":{"codeText":"each","language":"javascript","type":"inline"}}],"as":"span"}},{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"배열 형태의 값을 전달합니다."}}],"as":"span"}}]}}]}},{"type":"component","name":"ListItem","props":{"children":[{"type":"element","name":"div","props":{"style":{"display":"grid","gridTemplateColumns":"20% 80%"},"children":[{"type":"component","name":"Text","props":{"children":[{"type":"component","name":"CodeSnippet","props":{"codeText":"children","language":"javascript","type":"inline"}}],"as":"span"}},{"type":"component","name":"Text","props":{"children":[{"type":"text","name":"text","props":{"text":"배열의 값을 바탕으로 요소를 생성하여 반환하는 함수입니다."}}],"as":"span"}}]}}]}}]}},{"type":"component","name":"Text","props":{"text":"반환 값","kind":"heading-compact-01"}},{"type":"component","name":"UnorderedList","props":{"children":[{"type":"component","name":"ListItem","props":{"children":[{"type":"element","name":"div","props":{"style":{"display":"grid","gridTemplateColumns":"20% 80%"},"children":[{"type":"component","name":"Text","props":{"children":[{"type":"component","name":"CodeSnippet","props":{"codeText":"ForComponent","language":"javascript","type":"inline"}}],"as":"span"}},{"type":"component","name":"Text","props":{"as":"span","children":[{"type":"component","name":"CodeSnippet","props":{"codeText":"@rvjs/core","language":"javascript","type":"inline"}},{"type":"text","name":"text","props":{"text":"의 구성요소 중 하나입니다."}}]}}]}}]}}]}}]}},{"type":"component","name":"Section","props":{"children":[{"type":"component","name":"Text","props":{"text":"권장 사항","kind":"heading-03","as":"h4"}},{"type":"component","name":"Text","props":{"children":[{"type":"component","name":"CodeSnippet","props":{"codeText":"For","language":"javascript","type":"inline"}},{"type":"text","name":"text","props":{"text":" 함수는 내부적으로 상태의 각 아이템을 기억합니다. 만약 상태가 업데이트되면, 새로 추가된 아이템만 "}},{"type":"component","name":"CodeSnippet","props":{"codeText":"render","language":"javascript","type":"inline"}},{"type":"text","name":"text","props":{"text":" 함수를 실행하고, DOM에 추가합니다. 그렇기 때문에 만약 아이템이 객체 타입이라면, 참조를 유지할 수 있도록 주의해야 합니다."}}]}}]}},{"type":"element","name":"div","props":{"style":{"height":"60vh"}}},{"type":"component","name":"Link","props":{"href":"https://github.com/ILikeMintChocolate/rvjs/blob/docs/deploy/docs/content/ko/core-jsx/component/for.json","isExternal":true,"children":[{"type":"component","name":"DocumentIcon","props":{"style":{"width":"1rem","filter":"brightness(0) saturate(100%) invert(25%) sepia(69%) saturate(3617%) hue-rotate(218deg) brightness(100%) contrast(104%)","z-index":"-1"}}},{"type":"component","name":"Text","props":{"text":"Raw Data From Github","color":"linkPrimary"}}]}}]}