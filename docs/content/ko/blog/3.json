{
  "content": [
    {
      "type": "component",
      "name": "Text",
      "props": {
        "as": "h1",
        "text": "DX 고민하기 | 코드 평가 순서 제어",
        "kind": "heading-06"
      }
    },
    {
      "type": "component",
      "name": "Section",
      "props": {
        "children": [
          {
            "type": "element",
            "name": "div",
            "props": {
              "style": {
                "display": "flex",
                "gap": "1rem"
              },
              "children": [
                {
                  "type": "element",
                  "name": "div",
                  "props": {
                    "style": {
                      "width": "0.25rem",
                      "backgroundColor": "#0f62fe"
                    }
                  }
                },
                {
                  "type": "component",
                  "name": "Text",
                  "props": {
                    "text": "이 게시물은 0.2.2 이하 버전인 바닐라 JS에서 동작하는 라이브러리를 만든 경험을 다룹니다.",
                    "kind": "helper-text-02"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "component",
      "name": "Section",
      "props": {
        "children": [
          {
            "type": "component",
            "name": "Image",
            "props": {
              "aspectRatio": "16/9",
              "src": "https://github.com/ILikeMintChocolate/rvjs/blob/docs/deploy/docs/content/ko/blog/3.webp?raw=true"
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "kind": "helper-text-01",
              "color": "textHelper",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "내용과 전혀 관련없는 이미지입니다."
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "component",
      "name": "Section",
      "props": {
        "children": [
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": ""
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "@rvjs/core",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "는 0.2 버전까지 컴파일러 없이 순수 JavaScript로 동작하도록 설계되었습니다. 따라서 모던 SPA 개발 라이브러리와 유사한 개발자 경험(DX)을 제공하기 위해 많은 고민을 하였습니다."
                  }
                }
              ]
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "그중에서도 가장 깊이 고민했던 부분은 코드 평가 순서 제어였습니다. 일반적인 JavaScript에서는 함수의 인자를 전달할 때 평가가 이루어지지만, "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "@rvjs/core",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "에서는 상태가 어느 요소의 어떤 속성에서 사용되는지 문맥을 추적하는 과정이 필요합니다. 하지만 평가 순서를 그대로 두면, 상태가 먼저 실행되어 문맥을 추적할 수 없는 문제가 발생합니다."
                  }
                }
              ]
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "이 글에서는 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "@rvjs/core",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 0.2 버전에서 코드 평가 순서를 조정한 방법과 이를 통해 DX를 개선한 경험을 소개합니다."
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "component",
      "name": "Section",
      "props": {
        "children": [
          {
            "type": "component",
            "name": "Text",
            "props": {
              "text": "자바스크립트의 코드 평가 순서",
              "kind": "heading-03",
              "as": "h4"
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "자바스크립트에서 코드는 평가(evaluation)와 실행(execution) 두 단계로 이루어집니다. 일반적으로 함수를 호출할 때, 먼저 인자가 평가된 후 함수에 전달됩니다. 이를 간단한 예제로 살펴보겠습니다."
                  }
                }
              ]
            }
          },
          {
            "type": "component",
            "name": "CodeSnippet",
            "props": {
              "codeText": "const func = (value) => {\n  console.log('func', value)\n}\n\nconst getValue = () => {\n  console.log('getValue')\n  return 'Hello'\n}\n\nfunc(getValue())",
              "language": "javascript",
              "type": "multi",
              "width": "100%",
              "defaultShow": true
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "출력 결과는 다음과 같습니다."
                  }
                }
              ]
            }
          },
          {
            "type": "component",
            "name": "CodeSnippet",
            "props": {
              "codeText": "getValue\nfunc Hello",
              "language": "plain",
              "type": "multi",
              "width": "100%",
              "defaultShow": true
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "위 코드에서 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "func",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 함수가 호출되기 전, "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "getValue",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 함수가 먼저 호출되어 반환된 값이 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "func",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "의 인자로 전달됩니다. 즉, 자바스크립트는 항상 함수 호출 전에 전달할 값(인자)을 먼저 평가합니다."
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "component",
      "name": "Section",
      "props": {
        "children": [
          {
            "type": "component",
            "name": "Text",
            "props": {
              "text": "평가 순서로 인해 발생하는 문제",
              "kind": "heading-03",
              "as": "h4"
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "이러한 동작 방식은 일반적인 상황에서는 문제가 되지 않지만, 많은 문맥을 추적하고 공유해야 하는 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "@rvjs/core",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "에서는 문제가 될 수 있습니다. "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "@rvjs/core",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "는 상태가 어떤 요소의 어떤 속성에서 사용되는지 추적하는 과정이 필요합니다. 그러나 평가 순서를 그대로 두면 상태가 먼저 실행되어, 상태가 실제로 어디에서 사용되었는지 알 수 없는 문제가 발생합니다."
                  }
                }
              ]
            }
          },
          {
            "type": "component",
            "name": "CodeSnippet",
            "props": {
              "codeText": "const div = (properties) => {\n  const element = document.createElement('div')\n\n  for (const key in properties) {\n    element.setAttribute(key, properties[key])\n  }\n\n  return element\n}",
              "language": "javascript",
              "type": "multi",
              "width": "100%",
              "defaultShow": true
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "이 함수는 새로운 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "div",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 요소를 생성하고, 전달받은 객체의 속성을 해당 요소의 속성으로 설정합니다."
                  }
                }
              ]
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "이제 상태를 값으로 가지는 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "div",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 요소를 생성해 보겠습니다."
                  }
                }
              ]
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "이 과정을 간단한 예제 코드로 보면 다음과 같습니다."
                  }
                }
              ]
            }
          },
          {
            "type": "component",
            "name": "CodeSnippet",
            "props": {
              "codeText": "const [getCount, setCount] = useState(0)\n\nconst element = div({\n  textContent: getCount(),\n})",
              "language": "javascript",
              "type": "multi",
              "width": "100%",
              "defaultShow": true
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "자바스크립트의 평가 방식에 따라, "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "getCount",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "()는 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "div",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 함수가 실행되기 전에 먼저 평가됩니다. 즉, "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "getCount",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "() 내부의 상태 구독 시스템은 자신이 어떤 요소의 어떤 속성에서 사용되는지 알 수 없습니다."
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "component",
      "name": "Section",
      "props": {
        "children": [
          {
            "type": "component",
            "name": "Text",
            "props": {
              "text": "함수로 감싸서 해결하기",
              "kind": "heading-03",
              "as": "h4"
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "이 문제를 해결하는 가장 간단한 방법은 함수를 한 번 감싸서 평가를 지연하는 것입니다."
                  }
                }
              ]
            }
          },
          {
            "type": "component",
            "name": "CodeSnippet",
            "props": {
              "codeText": "const element = div({\n  textContent: () => getCount(),\n})",
              "language": "javascript",
              "type": "multi",
              "width": "100%",
              "defaultShow": true
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "이제 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "textContent",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 속성에는 즉시 평가된 값이 아니라, 함수 자체가 전달됩니다. 이를 통해 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "div",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 함수 내부에서 속성을 설정할 때 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "getCount",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 함수를 호출하도록 제어할 수 있습니다. 이 방식은 평가 순서를 조정할 수 있기 때문에, "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "@rvjs/core",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "가 상태가 사용된 요소와 속성을 정확히 추적할 수 있도록 도와줍니다."
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "component",
      "name": "Section",
      "props": {
        "children": [
          {
            "type": "component",
            "name": "Text",
            "props": {
              "text": "함수로 감싸는 방식의 문제",
              "kind": "heading-03",
              "as": "h4"
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "함수로 감싸는 방식은 코드 평가 순서를 제어할 수 있지만, 이벤트 등록을 위한 핸들러 함수와 혼동될 가능성이 있습니다."
                  }
                }
              ]
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "예를 들어, 다음 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "button",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 코드와 비교해 보겠습니다."
                  }
                }
              ]
            }
          },
          {
            "type": "component",
            "name": "CodeSnippet",
            "props": {
              "codeText": "button({\n  onclick: () => setCount(getCount() + 1),\n})",
              "language": "javascript",
              "type": "multi",
              "width": "100%",
              "defaultShow": true
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "이벤트 핸들러는 함수 자체를 전달해야 하므로, 상태 값을 감싸는 방식과 형태가 동일하게 보일 수 있습니다. 또한 각 속성이 함수를 전달받았을 때, 이를 실행해야 하는지를 판단할 수 없습니다."
                  }
                }
              ]
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "예를 들어, "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "div",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "의 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "textContent",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 속성에는 값을 즉시 평가하여 문자열로 설정해야 하지만, "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "button",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "의 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "onclick",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 속성은 함수 자체를 이벤트 핸들러로 등록해야 합니다."
                  }
                }
              ]
            }
          },
          {
            "type": "component",
            "name": "CodeSnippet",
            "props": {
              "codeText": "div({\n  textContent: () => getCount(),\n})\n\nbutton({\n  onclick: () => setCount(getCount() + 1),\n})",
              "language": "javascript",
              "type": "multi",
              "width": "100%",
              "defaultShow": true
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "즉, 단순히 함수를 감싸는 것만으로는 실행 여부를 판단할 기준이 부족합니다."
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "component",
      "name": "Section",
      "props": {
        "children": [
          {
            "type": "component",
            "name": "Text",
            "props": {
              "text": "dynamic 함수 도입",
              "kind": "heading-03",
              "as": "h4"
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "이 문제를 해결하기 위해, 동적 평가를 위한 별도의 구조를 만들었고, 그 결과 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "dynamic",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 함수를 고안하였습니다."
                  }
                }
              ]
            }
          },
          {
            "type": "component",
            "name": "CodeSnippet",
            "props": {
              "codeText": "const RVJS_DYNAMIC_RENDER_SYMBOL = Symbol('RVJS_DYNAMIC_RENDER_SYMBOL')\n\nconst dynamic = (resultFn) => {\n  const dynamicRender = (context) => {\n    if (context) {\n      stateContext.context = context\n      const result = resultFn()\n      stateContext.context = null\n      return result\n    }\n    return resultFn()\n  }\n  dynamicRender.$$typeof = RVJS_DYNAMIC_RENDER_SYMBOL\n  return dynamicRender\n}\n\nconst isDynamic = (value) => {\n  return value?.$$typeof === RVJS_DYNAMIC_RENDER_SYMBOL;\n};",
              "language": "javascript",
              "type": "multi",
              "width": "100%",
              "defaultShow": true
            }
          },
          {
            "type": "component",
            "name": "CodeSnippet",
            "props": {
              "codeText": "const div = (properties) => {\n  const element = document.createElement('div')\n\n  for (const key in properties) {\n    const value = properties[key]\n    if (isDynamic(value)) {\n      element.setAttribute(\n        key,\n        value(() => {\n          element.setAttribute(key, value())\n        })\n      )\n    } else {\n      element.setAttribute(key, value)\n    }\n  }\n}",
              "language": "javascript",
              "type": "multi",
              "width": "100%",
              "defaultShow": true
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": ""
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "dynamic",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 함수를 사용하면 평가가 필요한 함수인지 구분할 수 있습니다. 또한 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "$$typeof",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 속성을 추가하여 이후 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "isDynamic",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 함수를 사용해 구별할 수 있으며, 이를 통해 평가 시점에서 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "stateContext",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "를 설정할 수 있습니다."
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "component",
      "name": "Section",
      "props": {
        "children": [
          {
            "type": "component",
            "name": "Text",
            "props": {
              "text": "정리",
              "kind": "heading-03",
              "as": "h4"
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "as": "p",
              "kind": "body-01",
              "children": [
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": "기존 방식에서는 평가해야 하는 값과 그대로 등록해야 하는 함수를 구별할 방법이 없었습니다. 이를 해결하기 위해 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "dynamic",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 함수를 도입하여 평가 순서를 제어하는 구조를 만들었으며, "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "isDynamic",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 함수를 활용해 동적 평가가 필요한 값을 판별할 수 있도록 설계했습니다. 이를 통해 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "div",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 함수에서 속성별로 적절한 평가 방식을 적용할 수 있었으며, 결과적으로 "
                  }
                },
                {
                  "type": "component",
                  "name": "CodeSnippet",
                  "props": {
                    "codeText": "@rvjs/core",
                    "language": "javascript",
                    "type": "inline"
                  }
                },
                {
                  "type": "text",
                  "name": "text",
                  "props": {
                    "text": " 0.2 버전에서 컴파일러 없이도 코드 평가 순서를 정교하게 제어하며 DX를 향상할 수 있었습니다."
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "element",
      "name": "div",
      "props": {
        "style": {
          "height": "60vh"
        }
      }
    },
    {
      "type": "component",
      "name": "Link",
      "props": {
        "href": "https://github.com/ILikeMintChocolate/rvjs/blob/docs/deploy/docs/content/ko/blog/3.json",
        "isExternal": true,
        "children": [
          {
            "type": "component",
            "name": "DocumentIcon",
            "props": {
              "style": {
                "width": "1rem",
                "filter": "brightness(0) saturate(100%) invert(25%) sepia(69%) saturate(3617%) hue-rotate(218deg) brightness(100%) contrast(104%)"
              }
            }
          },
          {
            "type": "component",
            "name": "Text",
            "props": {
              "text": "Raw Data From Github",
              "color": "linkPrimary"
            }
          }
        ]
      }
    }
  ]
}
